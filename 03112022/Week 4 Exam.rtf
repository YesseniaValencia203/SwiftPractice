{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\froman\fcharset0 Times-Roman;
\f3\fnil\fcharset0 LucidaGrande;\f4\froman\fcharset0 Times-Bold;\f5\fswiss\fcharset0 Helvetica-Oblique;
}
{\colortbl;\red255\green255\blue255;\red31\green31\blue31;\red255\green255\blue255;\red44\green44\blue44;
\red27\green31\blue34;}
{\*\expandedcolortbl;;\cssrgb\c16078\c16078\c16078;\cssrgb\c100000\c100000\c100000;\cssrgb\c22745\c22745\c22745;
\cssrgb\c14118\c16078\c18039;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid101\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid102\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid201\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid202\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid301\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid302\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid401\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid501\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid601\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid701\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid702\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid801\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid901\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid902\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1001\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1101\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1201\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1202\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1401\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1501\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1601\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid17}
{\list\listtemplateid18\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid18}
{\list\listtemplateid19\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1801\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid19}
{\list\listtemplateid20\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1901\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1902\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid20}
{\list\listtemplateid21\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid2001\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2002\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid21}
{\list\listtemplateid22\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid2101\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2102\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid22}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}{\listoverride\listid18\listoverridecount0\ls18}{\listoverride\listid19\listoverridecount0\ls19}{\listoverride\listid20\listoverridecount0\ls20}{\listoverride\listid21\listoverridecount0\ls21}{\listoverride\listid22\listoverridecount0\ls22}}
\margl1440\margr1440\vieww16300\viewh19080\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0

\f0\b\fs36 \cf0 WEEK 4 EXAM
\f1\b0 \
\
Answer the given questions below in a short answer format.\
\pard\pardeftab720\partightenfactor0

\f2\fs32 \cf0 \expnd0\expndtw0\kerning0
\
\
\
1. Explain what is a protocol and why do we use them?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9642 
\f2 	}A protocol defines a blueprint of methods and/or properties that can be adopted by classes, enums, and structs.\
{\listtext	
\f3 \uc0\u9642 
\f2 	}The implementation of the methods are not provided by the protocol declaration but the methods defined in the protocols are instead implemented by the classes/structs that adopt them. This would force conformity in said classes/structs/enums. \
{\listtext	
\f3 \uc0\u9642 
\f2 	}Allow us to enforce requirements in types, create unit tests mocks, share functionality easily, etc. \
{\listtext	
\f3 \uc0\u9642 
\f2 	}Delegation: one of the most common use for protocols: Works by off-handing functionality from base class to another delegate class. Uses protocols to define what functionality can be handed off. \
{\listtext	
\f3 \uc0\u9642 
\f2 	}Dependency Injection: Uses protocols to create shallow implementations of certain types and objects. \
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf0 \
2. What is a REST-api?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9642 
\f2 	}REST (Representational State Transfer) is an architectural style used by web services to communicate between client and server. REST API creates an object and then sends the values of the an object in response to the client. \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls2\ilvl1\cf0 {\listtext	
\f3 \uc0\u8259 
\f2 	}Stateless: The requests sent from a client to a server will contain all the required information to make the server understand requests sent from clients (URL/query parameters/headers/etc). Once the server process the requests, a response is sent to the client through body/status/headers/etc.\
{\listtext	
\f3 \uc0\u8259 
\f2 	}Client-server: this architecture enables a uniform interface and separates clients from services, enhancing portability across multiple platforms. \
{\listtext	
\f3 \uc0\u8259 
\f2 	}Uniform Interface: To obtain uniformity throughout the application, REST has four interface constraints: Resource identification, Resource Manipulation using representations, Self-descriptive messages and hypermedia as the engine of application state. \
{\listtext	
\f3 \uc0\u8259 
\f2 	}Cacheable: To provide better performance, app are often made cacheable to allow client to reuse response data for equivalent responses in the future.\
{\listtext	
\f3 \uc0\u8259 
\f2 	}Layered system: This architecture allows an app to be more stable by limiting component behavior, enhancing app security since each layer can only interact with immediate layers. \
{\listtext	
\f3 \uc0\u8259 
\f2 	}Code on demand: Permits clients code or applets to be downloaded and used with app. \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf0 \
3. How do we get data from it?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9642 
\f2 	}CRUD operations via HTTP methods\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls3\ilvl1\cf0 {\listtext	
\f3 \uc0\u8259 
\f2 	}Create (POST)\
{\listtext	
\f3 \uc0\u8259 
\f2 	}Read (GET)\
{\listtext	
\f3 \uc0\u8259 
\f2 	}Update (PUT)\
{\listtext	
\f3 \uc0\u8259 
\f2 	}Delete (DELETE) \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf0 \
4. What are the different ways we can handle multithreading in iOS?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9642 
\f2 	}Grand Central Dispatch (GCD): moves all thread creation and management work down to the system level. It takes care of all thread creation, management, and creation. It also keeps track of the total number of threads in your app and prevents leaks. It manages a collection of dispatch queues. These queues execute work submitted to them on a pool of threads. \
{\listtext	
\f3 \uc0\u9642 
\f2 	}Operations and queues: OperationQueue manages threads and is responsible for running the operations that you have provided it. \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	
\f3 \uc0\u8259 
\f2 	}An Operation object maintains state internally to determine when to execute and notify clients of the task program throughout the program\'92s lifecycle. \
{\listtext	
\f3 \uc0\u8259 
\f2 	}In an OperationQueue, Operation objects are executed based on their priority and in FIFO order. \
{\listtext	
\f3 \uc0\u8259 
\f2 	}Operations can be paused, resumed, and cancelled (unlike GCD). \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf0 {\listtext	
\f3 \uc0\u9642 
\f2 	}Managing and creating threads manually \'97> not recommended\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	
\f3 \uc0\u8259 
\f2 	}developers would be responsible for the deallocation of each thread to prevent problems.\
{\listtext	
\f3 \uc0\u8259 
\f2 	}Synchronization mechanisms to orchestrate resource access between threads can add overhead to app \
\pard\tx720\tx1440\pardeftab720\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf0 5. What is Core Data?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9642 
\f2 	}Provides on-disk persistence (data is accessible even after shutting down app/device). \
{\listtext	
\f3 \uc0\u9642 
\f2 	}Framework used to manage model layer object inappropriate to save, track, modify, and filter data in app. NOT A DATABASE. \
{\listtext	
\f3 \uc0\u9642 
\f2 	}Commonly used as a wrapper for the SQLite database and it\'92s used to save and present any type of user data. It is easy to ready data on the main thread and to used background data saving. \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf0 \
6. What are other ways that you have used Data Persistency?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9642 
\f2 	}UserDefaults: used to store default information about app or it users, like preferences or default values that should be app-specific; shared between the app and app-extensions and is not encrypted\
{\listtext	
\f3 \uc0\u9642 
\f2 	}Keychain: database tool that is used to save sensitive information since the database is encrypted. NOT FOR LARGE OBJECTS \
{\listtext	
\f3 \uc0\u9642 
\f2 	}Disk: Every app has a sandbox directly where you can store files. FileManager object provides functionality with simple API. NOT ENCRYPTED. Error-prone. Thread-safe. \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf0 \
7. How do you make CoreData Thread Safe?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9642 
\f2 	}Using NSManagedObjectContext to perform operations on the thread it was created. Using the right functions and objects to pass information, since not all methods/objects are thread-safe. \
{\listtext	
\f3 \uc0\u9642 
\f2 	}Using NSPersistentContainer which encapsulates the Core Data stack in the app; simplifies the creation and management of the Core Data Stack by handling the creation of the managed object model (NSManagedObjectModel), persistent store coordinator (NSPersistentStoreCoordinator) and the managed object context (NSManagedObjectContext). \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf0 \
8. What are the different ways we can unwrap an optional?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9642 
\f2 	}
\f4\b if let: 
\f2\b0 If there is a value inside the optional, then you can use it, otherwise the condition fails. \
{\listtext	
\f3 \uc0\u9642 
\f2 	}
\f4\b guard let: 
\f2\b0 Unwraps the optional but if it finds nil, it will expect you to exit the function, loop, condition you used it in. \
{\listtext	
\f3 \uc0\u9642 
\f2 	}
\f4\b Force unwrapping (!): 
\f2\b0 Unwraps the optional but should only be used when you\'92re sure its sage otherwise it will crash. \
{\listtext	
\f3 \uc0\u9642 
\f2 	}
\f4\b Implicitly unwrapped optionals: 
\f2\b0 Created by adding an exaclamation mark after type name; because they behave as if they\'92re already unwrapped, if let/ guard let is not needed. If they\'92re nil \'97> crash\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls8\ilvl1\cf0 {\listtext	
\f3 \uc0\u8259 
\f2 	}Used when a variable starts off as nil but is expected to have a value by the time they\'92re used. \
\pard\tx220\tx720\tx1440\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0\cf0 {\listtext	
\f3 \uc0\u9642 
\f2 	}
\f4\b Nil coalescing operator(??): 
\f2\b0  unwraps an optional and return a value if it exists or else returns a default value provided. Result will not be an optional. \
{\listtext	
\f3 \uc0\u9642 
\f2 	}
\f4\b Optional Chaining (?): 
\f2\b0 By adding a question mark, Swift will check if it has a value and if it nil, the rest of the line is ignored and nil will immediately be returned. If it has value, it will be unwrapped and execution will continue. \
\pard\tx720\tx1440\pardeftab720\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf0 9. How would you go about creating your own data structure to take the place of an optionals if they didn\'92t already exist in Swift?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9642 
\f2 	}To take place of an optional, I would use an enum to return either the absence of a value or (if present) the value itself. \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf0 \
9. What is a retain cycle? How do we avoid them?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u8259 
\f2 	}When to objects refer to each other via strong references, they will prevent the compiler from deallocating either object because their ARC count will always be one.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	
\f3 \uc0\u8259 
\f2 	}Leading to memory leaks, which occur when allocated memory space cannot be deallocated for some reason.\
\pard\tx220\tx720\tx1440\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0\cf0 {\listtext	
\f3 \uc0\u8259 
\f2 	}Avoid by declaring at least one of the variables as weak/unowned to lower the ARC count of one of them to zero   \
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
\
\
\pard\pardeftab720\partightenfactor0
\cf0 10. How are dispatch groups implemented?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls11\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9642 
\f2 	}DispatchGroup class is used when you need to keep track of multiple operations and want them all done without having to monitor each task individually.  \
{\listtext	
\f3 \uc0\u9642 
\f2 	}To specify what the group does after all the tasks are completed 
\f4\b notify(queue:work:) 
\f2\b0 is called on the group. \
{\listtext	
\f3 \uc0\u9642 
\f2 	}Every operation enters the groups before it starts its task 
\f4\b enter() 
\f2\b0  and leaves the group when each closure is completed 
\f4\b leave() 
\f2\b0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf0 \
11. What is Autolayout?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls12\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9642 
\f2 	}Tool for creating flexible, maintainable rules for UI. \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf0 \
12. What is a closure? What is the difference between an escaping and non-escaping closure?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9642 
\f2 	}Closure: reusable blocks of code\
{\listtext	
\f3 \uc0\u9642 
\f2 	}Non-escaping closure: When the function returns after the closure is executed instead of before the closure is executed. \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls13\ilvl1\cf0 {\listtext	
\f3 \uc0\u8259 
\f2 	}By non-escaping parameter, the parameter cannot exist outside the scope of the function\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf0 {\listtext	
\f3 \uc0\u9642 
\f2 	}Escaping closure: \'93A closure is said to escape a function when the closure is passed as an argument to the function, but is called after the function returns\'94. When you declare  a function that takes a closure as one of its parameters, you must write 
\f4\b @escaping 
\f2\b0 before the parameter\'92s type to indicate the closure is allowed to escape. \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls13\ilvl1\cf0 {\listtext	
\f3 \uc0\u8259 
\f2 	}the function to which the closure is passed must return before the closure is executed. \
{\listtext	
\f3 \uc0\u8259 
\f2 	}have to refer to self explicitly if you want to refer any of the class/struct variables \
{\listtext	
\f3 \uc0\u8259 
\f2 	}The usage of self is an explicit acknowledgement of referencing (capturing) a construct (class/struct/enum) in a closure ==> self will not be deallocated until said closure is deallocated. \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf0 \
\
13. 
\f1\fs28 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \cb3 What are lazy properties, how do they work?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls14\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}Lazy properties aren\'92t initialized until they\'92re first accessed in the program. Prevents code from doing unnecessary work. \
{\listtext	\uc0\u8226 	}Lazy properties are only calculated once meaning it will use the state of the moment it\'92s getting called. \
{\listtext	\uc0\u8226 	}Lazy variables are mutable meaning you can call lazy variables on mutable structs. \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
14. What are property observers?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls15\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \AppleTypeServices \uc0\u9642 
\f1 \AppleTypeServices\AppleTypeServicesF65539 	}willSet/didSet\
{\listtext	
\f3 \AppleTypeServices \uc0\u9642 
\f1 \AppleTypeServices\AppleTypeServicesF65539 	}provide a way to easily serve changes in values without the need for additional abstraction. Can be used to ensure we\'92re driving our logic based on a single source of truth and allow us to reactively update other values and state when a given property changes. \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
15. What\'92s the application and controller lifecycle?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls16\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \AppleTypeServices \uc0\u9642 
\f1 \AppleTypeServices\AppleTypeServicesF65539 	}Not Running: Either the app has not started yet or was surging and has been terminated by the system\
{\listtext	
\f3 \AppleTypeServices \uc0\u9642 
\f1 \AppleTypeServices\AppleTypeServicesF65539 	}Inactive: App is running in the foreground but is not receiving any events. This could happen in case a call/message is received. \
{\listtext	
\f3 \AppleTypeServices \uc0\u9642 
\f1 \AppleTypeServices\AppleTypeServicesF65539 	}Active: App is running in the foreground and receiving the events\
{\listtext	
\f3 \AppleTypeServices \uc0\u9642 
\f1 \AppleTypeServices\AppleTypeServicesF65539 	}Background: App is running in the background and executing the code. \
{\listtext	
\f3 \AppleTypeServices \uc0\u9642 
\f1 \AppleTypeServices\AppleTypeServicesF65539 	}Suspended: An app is in the background but it not executing the code. The system moves the app into this state automatically and does not notify. \
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \
Controller Life Cycle: \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0\cf2 {\listtext	
\f3 \AppleTypeServices \uc0\u9642 
\f1 \AppleTypeServices\AppleTypeServicesF65539 	}LoadView(): Creates the view that the controller manager. Never call this method directly. Controller calls this when its view property is requested but is currently nil. This methods loads and creates a view and assigns it to the view property. \
{\listtext	
\f3 \AppleTypeServices \uc0\u9642 
\f1 \AppleTypeServices\AppleTypeServicesF65539 	}viewDidLoad(): called after the controller\'92s view is loaded into memory. Called after the controller has loaded its view hierarchy into memory. \
{\listtext	
\f3 \AppleTypeServices \uc0\u9642 
\f1 \AppleTypeServices\AppleTypeServicesF65539 	}viewWillAppear(): notifies the VC that its view is about to be added to a view hierarchy and before any animation is configured for showing the view. \
{\listtext	
\f3 \AppleTypeServices \uc0\u9642 
\f1 \AppleTypeServices\AppleTypeServicesF65539 	}viewWillDisappeared(): notifies the VC that its view is about to be removed from a view hierarchy.\
{\listtext	
\f3 \AppleTypeServices \uc0\u9642 
\f1 \AppleTypeServices\AppleTypeServicesF65539 	}viewDidDisappeared(): notifies the CV that the view isa actually removed and before any animations are configured. \
{\listtext	
\f3 \AppleTypeServices \uc0\u9642 
\f1 \AppleTypeServices\AppleTypeServicesF65539 	}viewWillTransition(to:with:): notifies the container that the size of its view is about to change. \
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 16. How would you store sensitive user data?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}We store sensitive user data in the keychain. \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
17. \AppleTypeServices \cf4 What is a Guard statement?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls19\ilvl0\cf4 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9642 
\f1 	}Used to transfer program control out of scope when certain conditions are not met. \
{\listtext	
\f3 \uc0\u9642 
\f1 	}Statement runs when a certain condition is not met. \
{\listtext	
\f3 \uc0\u9642 
\f1 	}Exit from function/scope as soon as the condition evaluates to false. \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf4 \
18. \cf5 What is a 
\f5\i Serial Queue
\f1\i0 ?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls20\ilvl0\cf4 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9642 
\f1 	}A serial queue executes tasks one at a time, meaning a thread that initiated that operation  will wait for the task to finish before continuing. Tasks start in the order they\'92re added and finish in the same order. \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls20\ilvl1\cf4 {\listtext	\uc0\u8259 	}Advantage: Predictability \'97> we have reference of which task executes first\
{\listtext	\uc0\u8259 	}Disadvantage: Decreased performance \'97> Second task needs to wait for the first one finish before it can begin. \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf4 \
19. What is the difference between strong, weak, & unowned? When do we use them?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls21\ilvl0\cf4 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9642 
\f1 	}
\f0\b Strong: 
\f1\b0 Protects the object it points to from getting deallocated by ARC. 
\f0\b \
\ls21\ilvl0
\f1\b0 {\listtext	
\f3 \uc0\u9642 
\f1 	}
\f0\b Weak: 
\f1\b0 Does not increment the ARC count when pointing to an object so it does not protect referred object from getting deallocated from memory when no strong reference points to it. \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls21\ilvl1
\f0\b \cf4 {\listtext	\uc0\u8259 	}Must be optional\
{\listtext	\uc0\u8259 	}nil
\f1\b0  when there is no other strong reference left pointing to the object -> can\'92t be constant 
\f0\b \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls21\ilvl0
\f1\b0 \cf4 {\listtext	
\f3 \uc0\u9642 
\f1 	}
\f0\b Unowned: 
\f1\b0 Does not increase ARC count; does not have to be an optional and should only be used when you are certain that the reference will never be nil once it has been set during initialization. \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf4 \
20. 
\f2\fs32 \cf0 \cb1  How do we create Singletons in Swift?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls22\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9642 
\f2 	}Defining a global variable: By defining a variable in the global namespace of the project, any object in the module has access to the singleton object. Initiated lazily. \
{\listtext	
\f3 \uc0\u9642 
\f2 	}Static property and private initializer: \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls22\ilvl1\cf0 {\listtext	
\f3 \uc0\u8259 
\f2 	}The initializer is private -> only the class can create instances of itself. \
{\listtext	
\f3 \uc0\u8259 
\f2 	}static constant property gives other  objects access to the singleton object .\expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf0 \
}